# ==============================================================================
# Clas12Root Library Definition
#
# This file defines the main Clas12Root shared library, generates its
# ROOT dictionary, and links its dependencies using modern CMake targets.
# ==============================================================================

# For clarity, we define the name of the library target we are building.
set(CLAS12ROOT_TARGET_NAME Clas12Root)




# --- 2. Define Source Files and Headers for This Library ---
set(CLAS12ROOT_SOURCES
    BankHist.cpp
    HipoHist.cpp
    HipoTreeMaker.cpp
    HipoChain.cpp
    HipoChainWriter.cpp
    HipoRootAction.cpp
    HipoROOTOut.cpp
    ParticleHist.cpp
    HipoSelector.cpp
    ParticleTree.cpp
)
set(CLAS12ROOT_HEADERS
    BankHist.h
    HipoHist.h
    HipoTreeMaker.h
    HipoChain.h
    HipoChainWriter.h
    HipoRootAction.h
    HipoROOTOut.h
    ParticleHist.h
    HipoSelector.h
    ParticleTree.h
)


# --- 3. Generate ROOT Dictionary ---
# Replaced the deprecated ROOT_GENERATE_DICTIONARY with the modern function.
root_generate_dictionary(G__${CLAS12ROOT_TARGET_NAME}
    ${CLAS12ROOT_HEADERS}
    LINKDEF Clas12RootLinkDef.h
)


# --- 4. Create the Library Target ---
# We add our sources and the dictionary source file generated by ROOT.
add_library(${CLAS12ROOT_TARGET_NAME} SHARED
    ${CLAS12ROOT_SOURCES}
    G__${CLAS12ROOT_TARGET_NAME}.cxx)


# --- 5. Link Dependencies to the Library ---
# This is the most robust and readable way to handle optional dependencies.


# First, create a list containing the libraries that are always required.
set(CLAS12ROOT_LINK_LIBRARIES
    # Link the ROOT components needed by this library
    ROOT::Core
    ROOT::RIO
    ROOT::Hist
    ROOT::Graf
    ROOT::Gpad
    ROOT::Gui
    ROOT::MathCore
    ROOT::Rint
    RIO # For reading/writing ROOT files, essential for TTree
    Tree # For TTree, TChain, TSelector

    # Link the HIPO target defined in the parent CMakeLists.txt
    hipo::hipo

    # Link the Clas12Banks library target, which is a key dependency
    Clas12Banks
)

# Second, check if each optional target exists and, if so, add it to the list.
if(TARGET clas12::rcdb)
    list(APPEND CLAS12ROOT_LINK_LIBRARIES clas12::rcdb)
endif()

if(TARGET clas12::ccdb)
    list(APPEND CLAS12ROOT_LINK_LIBRARIES clas12::ccdb)
endif()


# Define the library's public include directory.
# This tells CMake that any target linking against Clas12Root should
# have the current source directory added to its include paths. This is how
# it will find "TRcdbVals.h" and all your other local headers.
target_include_directories(${CLAS12ROOT_TARGET_NAME}
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
)
# Finally, link the entire list of required and optional libraries to our target.
# Using PUBLIC ensures that any executable linking against Clas12Root
# will also get these dependencies automatically.
target_link_libraries(${CLAS12ROOT_TARGET_NAME}
    PUBLIC
        ${CLAS12ROOT_LINK_LIBRARIES}
)

# --- 6. Installation ---
install(TARGETS ${CLAS12ROOT_TARGET_NAME}
    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
)

# --- 7. Configure Executable Subdirectory ---
# By setting the link libraries above to PUBLIC, any target created in the
# 'src' subdirectory that links against Clas12Root will automatically
# get all the correct include paths and link flags for ROOT, HIPO, etc.
add_subdirectory(src)
